# -*- coding: utf-8 -*-
"""PAN CARD Tampering Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Rqn8fev9sdwiv5LJDa0HSiVN84jB3UUN

# PAN CARD TAMPERING DETECTION

####The purpose of this project is to detect PAN card Tampering using Computer Vision. This project will help different organizations to detect that the IDs i.e the PAN card provided by any customer or employee is original or not.

For this we will calculate the structural originality of the original PAN card and the PAN card uploaded by user
"""

from skimage.metrics import structural_similarity
import imutils
import cv2
from PIL import Image
import requests

!mkdir pan_card_tampering
!mkdir pan_card_tampering/Image

# open and get image
original=Image.open(requests.get('https://raw.githubusercontent.com/Harshal-Mendhe/pan-card-tamp/main/sample_data/original.jpg',stream=True).raw)
tampered=Image.open(requests.get('https://raw.githubusercontent.com/Harshal-Mendhe/pan-card-tamp/main/sample_data/tampered.jpg', stream=True).raw)

#The file format of the source file
print('Original image:', original.format)
print('Tampered image:', tampered.format)

#Image size in pixels , The image size is given as 2-tuples(Width, height)
print("Originaal image size", original.size)
print("Tampered image size", tampered.size)
original.save('pan_card_tampering/Image/original.jpeg')
tampered.save('pan_card_tampering/Image/tampered.jpeg')

#Display original Image
original

#Display user given image
tampered

#load the two input images
original=cv2.imread("pan_card_tampering/Image/original.jpeg")
tampered=cv2.imread("pan_card_tampering/Image/tampered.jpeg")

# Converting the image to graysacle
original_gray=cv2.cvtColor(original, cv2.COLOR_BGR2GRAY)
tampered_gray=cv2.cvtColor(tampered, cv2.COLOR_BGR2GRAY)

# Computing the Structural Similarity Index (SSI) between the images, ensuring the difference between the images
(score, diff) = structural_similarity(original_gray, tampered_gray, full=True)
diff=(diff*255).astype("uint8")
print("SSIN =",format(score))

# Calculate threshold and contours
thresh=cv2.threshold(diff, 0, 255, cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)[1]
nts=cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
nts=imutils.grab_contours(nts)

#loop over the contours
for c in nts:
  #apply contours on image
  (x,w,y,h)=cv2.boundingRect(c)
  cv2.rectangle(original, (x,y),(x+w, y+h), (0,0,255),2)
  cv2.rectangle(tampered, (x,y),(x+w, y+h), (0,0,255),2)

#Display original image with contours
print("original Image")
Image.fromarray(original)

#Display original image with contours
print("original Image")
Image.fromarray(tampered)

#display difference image with black
print("Different Image")
Image.fromarray(diff)

#Display threshold image with white
print("Theshold image")
Image.fromarray(thresh)













